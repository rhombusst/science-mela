#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// ?? Replace with your WiFi credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// ?? NodeMCU pins (adjust as per your wiring)
#define MOTOR_FWD D1
#define MOTOR_BACK D2
#define MOTOR_LEFT D3
#define MOTOR_RIGHT D4
#define ANCHOR_PIN D5
#define LIGHTS_PIN D6
#define HORN_PIN D7
#define PH_SENSOR A0   // pH sensor analog pin

ESP8266WebServer server(80);

// Stop all motors
void stopAll() {
  digitalWrite(MOTOR_FWD, LOW);
  digitalWrite(MOTOR_BACK, LOW);
  digitalWrite(MOTOR_LEFT, LOW);
  digitalWrite(MOTOR_RIGHT, LOW);
}

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    attempts++;
    if (attempts > 20) { // ~10 seconds timeout
      Serial.println("\nFailed to connect. Restarting...");
      ESP.restart();
    }
  }
  Serial.println("\nWiFi connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Setup pins
  pinMode(MOTOR_FWD, OUTPUT);
  pinMode(MOTOR_BACK, OUTPUT);
  pinMode(MOTOR_LEFT, OUTPUT);
  pinMode(MOTOR_RIGHT, OUTPUT);
  pinMode(ANCHOR_PIN, OUTPUT);
  pinMode(LIGHTS_PIN, OUTPUT);
  pinMode(HORN_PIN, OUTPUT);

  stopAll();

  // Routes
  server.on("/", []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Smart IoT Boat - NodeMCU Online");
  });

  server.on("/forward", []() {
    stopAll();
    digitalWrite(MOTOR_FWD, HIGH);
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Forward");
  });

  server.on("/back", []() {
    stopAll();
    digitalWrite(MOTOR_BACK, HIGH);
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Backward");
  });

  server.on("/left", []() {
    stopAll();
    digitalWrite(MOTOR_LEFT, HIGH);
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Left");
  });

  server.on("/right", []() {
    stopAll();
    digitalWrite(MOTOR_RIGHT, HIGH);
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Right");
  });

  server.on("/stop", []() {
    stopAll();
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Stopped");
  });

  server.on("/anchor", []() {
    digitalWrite(ANCHOR_PIN, !digitalRead(ANCHOR_PIN));
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Anchor toggled");
  });

  server.on("/lights", []() {
    digitalWrite(LIGHTS_PIN, !digitalRead(LIGHTS_PIN));
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Lights toggled");
  });

  server.on("/horn", []() {
    digitalWrite(HORN_PIN, HIGH);
    delay(500);
    digitalWrite(HORN_PIN, LOW);
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", "Horn");
  });

  // pH sensor endpoint (returns only word)
  server.on("/ph", []() {
    int sensorValue = analogRead(PH_SENSOR);
    float voltage = sensorValue * (3.3 / 1023.0);
    float phValue = 7 + ((2.5 - voltage) / 0.18);

    String phStatus;
    if (phValue < 7.0) phStatus = "Acidic";
    else if (phValue > 7.0) phStatus = "Alkaline";
    else phStatus = "Neutral";

    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", phStatus);
  });

  // Handle unknown routes
  server.onNotFound([]() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(404, "text/plain", "Not Found");
  });

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}
